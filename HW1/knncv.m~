function cv_error = knncv(traindata, trainlabels, n, k, f, D)
      % NUMBER OF CLASSES = 8 (labels in 'trainlabels' for 800)
      % NUMBER OF NEAREST NEIGHBORS = k
      % NUMBER OF TRAINING EXAMPLES = 800
      % NUMBER OF FEATURES = 512
      % NUMBER OF PARTITIONS OF TRAINING LABLES = n
%% Partition training data into n parts of ~approx equal size
[divided_D,divided_L] = divide_training_into_n(traindata,trainlabels,n);
%% Use n-1 of these parts as training data
%  for j = 1:n
%     cur_traindata = divided_D(:,:,j)
%     predlabels = knn(cur_traindata, trainlabels, testdata, k, f)
%  end
%% Make predictions on teh held-out part
%% Repeat for all held out folds. Call the error of these predictions our cross-val error.
cv_error = 99;
% Plot train error: 
% i.e. if you train on all 800 images, and make predictions on these same 800
%images


  % Nested fuctions
    function [Multi_A,Multi_L] = divide_training_into_n(T_data, L_data, n)
      % Assumption 1: Number of rows is the number of training examples
      % Assumption 2: Number of rows is evenly divisible by n.
      div = size(T_data,1)/n;
      diff = div - 1;
      % Create multidimensional array                  
      Multi_A = zeros(div,size(T_data,2),n);    % 80x512x10
      for j = 1:n
          up = j*div;
          low = up-diff;
%           disp(['low = ' num2str(low) '  up = ' num2str(up)]); 
          cur_matrix = T_data(low:up,:);
          size(cur_matrix);
          Multi_A(:,:,j) = cur_matrix;
      end
      % Also separate the labels
      Multi_L = reshape(L_data,div,1,n);

    end

function [Multi_A,Multi_L] = divide_training_into_n(T_data, L_data, n)
      % Assumption 1: Number of rows is the number of training examples
      % Assumption 2: Number of rows is evenly divisible by n.
      div = size(T_data,1)/n;
      diff = div - 1;
      % Create multidimensional array                  
      Multi_A = zeros(div,size(T_data,2),n);    % 80x512x10
      for j = 1:n
          up = j*div;
          low = up-diff;
%           disp(['low = ' num2str(low) '  up = ' num2str(up)]); 
          cur_matrix = T_data(low:up,:);
          size(cur_matrix);
          Multi_A(:,:,j) = cur_matrix;
      end
      % Also separate the labels
      Multi_L = reshape(L_data,div,1,n);

    end
end


% % Useful for checking equality of multi-dim array to original array.
% if(divided(:,:,2) == traindata(81:160,:))
%     disp('both equal');
% end
